import requests
import logging
from typing import Optional, List, Union

logger = logging.getLogger(__name__)


def _format_new_product_message(product_data) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    return f"""
        üöÄ <b>–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∞</b>
        
üë§ <b>–î–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –ò–º—è: {product_data.get("full_name") or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {product_data.get("age") or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ì–æ—Ä–æ–¥: {product_data.get("city") or '–ù–µ —É–∫–∞–∑–∞–Ω'}
"""


class TelegramBotClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –±–æ—Ç–∞"""

    def __init__(self, bot_token: str, chat_ids: Union[str, List[str]] = None):
        """
        :param bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç BotFather
        :param chat_ids: ID —á–∞—Ç–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º chat_ids - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º
        if chat_ids is None:
            self.chat_ids = []
        elif isinstance(chat_ids, str):
            self.chat_ids = [chat_ids]
        else:
            self.chat_ids = chat_ids

    def add_chat_id(self, chat_id: str):
        """–î–æ–±–∞–≤–∏—Ç—å chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if chat_id not in self.chat_ids:
            self.chat_ids.append(chat_id)

    def add_chat_ids(self, chat_ids: List[str]):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ chat_id"""
        for chat_id in chat_ids:
            self.add_chat_id(chat_id)

    def remove_chat_id(self, chat_id: str):
        """–£–¥–∞–ª–∏—Ç—å chat_id –∏–∑ —Å–ø–∏—Å–∫–∞"""
        if chat_id in self.chat_ids:
            self.chat_ids.remove(chat_id)

    def set_chat_ids(self, chat_ids: List[str]):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ chat_ids"""
        self.chat_ids = chat_ids

    def send_message(
            self,
            text: str,
            chat_ids: Optional[Union[str, List[str]]] = None,
            parse_mode: str = "HTML",
            disable_web_page_preview: bool = True
    ) -> dict:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram

        :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        :param chat_ids: ID —á–∞—Ç–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è self.chat_ids)
        :param parse_mode: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (HTML, Markdown)
        :return: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ {success: [], failed: []}
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ chat_ids
        if chat_ids is None:
            target_chat_ids = self.chat_ids
        elif isinstance(chat_ids, str):
            target_chat_ids = [chat_ids]
        else:
            target_chat_ids = chat_ids

        if not target_chat_ids:
            logger.error("Chat IDs not specified")
            return {'success': [], 'failed': []}

        results = {'success': [], 'failed': []}

        for chat_id in target_chat_ids:
            url = f"{self.base_url}/sendMessage"
            payload = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': parse_mode,
                'disable_web_page_preview': disable_web_page_preview
            }

            try:
                response = requests.post(url, json=payload, timeout=10)
                response.raise_for_status()
                results['success'].append(chat_id)
            except requests.exceptions.RequestException as e:
                results['failed'].append(chat_id)

        return results

    def send_message_with_keyboard(
            self,
            text: str,
            keyboard: list,
            chat_ids: Optional[Union[str, List[str]]] = None,
            parse_mode: str = "HTML"
    ) -> dict:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ chat_ids
        if chat_ids is None:
            target_chat_ids = self.chat_ids
        elif isinstance(chat_ids, str):
            target_chat_ids = [chat_ids]
        else:
            target_chat_ids = chat_ids

        if not target_chat_ids:
            logger.error("Chat IDs not specified")
            return {'success': [], 'failed': []}

        results = {'success': [], 'failed': []}

        for chat_id in target_chat_ids:
            url = f"{self.base_url}/sendMessage"
            payload = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': parse_mode,
                'reply_markup': {
                    'keyboard': keyboard,
                    'resize_keyboard': True,
                    'one_time_keyboard': False
                }
            }

            try:
                response = requests.post(url, json=payload, timeout=10)
                response.raise_for_status()
                results['success'].append(chat_id)
                logger.info(f"Message with keyboard sent successfully to {chat_id}")
            except requests.exceptions.RequestException as e:
                results['failed'].append(chat_id)
                logger.error(f"Failed to send message with keyboard to {chat_id}: {e}")

        return results

    def send_message_with_inline_keyboard(
            self,
            text: str,
            inline_keyboard: List[List[dict]],
            chat_ids: Optional[Union[str, List[str]]] = None,
            parse_mode: str = "HTML",
            disable_web_page_preview: bool = True
    ) -> dict:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

        :param inline_keyboard: –°–ø–∏—Å–æ–∫ —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫ [[{text: '', url: ''}], [...]]
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ chat_ids
        if chat_ids is None:
            target_chat_ids = self.chat_ids
        elif isinstance(chat_ids, str):
            target_chat_ids = [chat_ids]
        else:
            target_chat_ids = chat_ids

        if not target_chat_ids:
            logger.error("Chat IDs not specified")
            return {'success': [], 'failed': []}

        results = {'success': [], 'failed': []}

        for chat_id in target_chat_ids:
            url = f"{self.base_url}/sendMessage"
            payload = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': parse_mode,
                'disable_web_page_preview': disable_web_page_preview,
                'reply_markup': {
                    'inline_keyboard': inline_keyboard
                }
            }

            try:
                response = requests.post(url, json=payload, timeout=10)
                response.raise_for_status()
                results['success'].append(chat_id)
            except requests.exceptions.RequestException as e:
                results['failed'].append(chat_id)

        return results

    def send_new_product_notification(self, product_data, chat_ids: Optional[Union[str, List[str]]] = None) -> dict:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        inline_keyboard = [
            [
                {
                    'text': 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É',
                    'url': 'https://docs.google.com/spreadsheets/d/1t2E4EeVU9ITPtA776zItYrELOELLp2ZjLxOhTFgKsOU/edit'
                }
            ]
        ]

        message = _format_new_product_message(product_data)

        return self.send_message_with_inline_keyboard(
            text=message,
            inline_keyboard=inline_keyboard,
            chat_ids=chat_ids
        )

    def get_chat_ids_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ chat_ids –≤ —Å–ø–∏—Å–∫–µ"""
        return len(self.chat_ids)

    def clear_chat_ids(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ chat_ids"""
        self.chat_ids = []
